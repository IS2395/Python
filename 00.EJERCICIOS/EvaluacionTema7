{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMgFSmfmcyW2OfJ05gYYKbb",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/IS2395/Python/blob/main/00.EJERCICIOS/EvaluacionTema7\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Práctica 7. Programación orientada a objetos. (6 puntos)\n",
        "\n",
        "##Ejercicio 1 (2 puntos)\n",
        "\n",
        "Vamos a crear una clase llamada Persona. Sus atributos son: nombre, edad y DNI. Construye los siguientes métodos para la clase:\n",
        "\n",
        "● Un constructor, donde los datos pueden estar vacíos.\n",
        "\n",
        "● Los setters y getters para cada uno de los atributos. Hay que validar las entradas de datos.\n",
        "\n",
        "● mostrar(): Muestra los datos de la persona.\n",
        "\n",
        "● esMayorDeEdad(): Devuelve un valor lógico indicando si es mayor de edad."
      ],
      "metadata": {
        "id": "7i4S6yU8ftc5"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 33,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 192
        },
        "id": "2MVJm4rQfsu3",
        "outputId": "92149a07-daf4-4868-e115-ba5fdd134347"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Nombre: Ivan Edad: 23 DNI: 1234567890\n",
            "El nombre no puede estar vacio\n",
            "Dato invalido, no se pudo actualizar la edad\n",
            "El DNI debe tener 10 caracteres\n",
            "Nombre: Ivan Edad: 23 DNI: 1234567890\n",
            "Se ha cambiado el nombre a  Pablo\n",
            "Se ha actualizado la edad a  25\n",
            "Se ha actualizado el DNI a  1234567891\n",
            "Nombre: Pablo Edad: 25 DNI: 1234567891\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'Mayor de edad'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 33
        }
      ],
      "source": [
        "class Persona:\n",
        "  def __init__(self,nombre,edad,dni):\n",
        "    self.__nombre=nombre\n",
        "    self.__edad=edad\n",
        "    self.__dni=dni\n",
        "\n",
        "  @property\n",
        "  def nombre(self):\n",
        "    return self.__nombre\n",
        "\n",
        "  @nombre.setter\n",
        "  def nombre(self,nnombre):\n",
        "    if nnombre:\n",
        "      self.__nombre=nnombre\n",
        "      print('Se ha cambiado el nombre a ', self.nombre)\n",
        "    else:\n",
        "      print('El nombre no puede estar vacio')\n",
        "    return self.__nombre\n",
        "\n",
        "  @property\n",
        "  def edad(self):\n",
        "    return self.__edad\n",
        "  \n",
        "  @edad.setter\n",
        "  def edad(self,nedad):\n",
        "    if nedad <= 0 or nedad > 110:\n",
        "      print('Dato invalido, no se pudo actualizar la edad')      \n",
        "    else:\n",
        "      self.__edad=nedad\n",
        "      print('Se ha actualizado la edad a ',self.edad)\n",
        "    return self.__edad\n",
        "\n",
        "  @property\n",
        "  def dni(self):\n",
        "    return self.__dni\n",
        "\n",
        "  @dni.setter\n",
        "  def dni(self,ndni):\n",
        "    if len(ndni) != 10:\n",
        "      print('El DNI debe tener 10 caracteres')      \n",
        "    else:\n",
        "      self.__dni=ndni\n",
        "      print('Se ha actualizado el DNI a ',self.dni)\n",
        "    return self.__dni\n",
        "\n",
        "  def mostrar(self):\n",
        "    print(f'Nombre: {self.nombre} Edad: {self.edad} DNI: {self.dni}')\n",
        "\n",
        "  def esMayorDeEdad(self):\n",
        "    if self.edad >= 18:\n",
        "      return 'Mayor de edad'\n",
        "    else:\n",
        "      return 'No es mayor de edad'\n",
        "\n",
        "persona1=Persona('Ivan',23,'1234567890')\n",
        "persona1.mostrar()\n",
        "persona1.nombre=''\n",
        "persona1.edad=234\n",
        "persona1.dni='12345678910'\n",
        "persona1.mostrar()\n",
        "\n",
        "persona1.nombre='Pablo'\n",
        "persona1.edad=25\n",
        "persona1.dni='1234567891'\n",
        "persona1.mostrar()\n",
        "persona1.esMayorDeEdad()\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Ejercicio 2 (2 puntos)\n",
        "Crea una clase llamada Cuenta que tendrá los siguientes atributos: titular (que es una persona) y cantidad (puede tener decimales). El titular será obligatorio y la cantidad es opcional. Construye los siguientes métodos para la clase:\n",
        "\n",
        "● Un constructor, donde los datos pueden estar vacíos.\n",
        "\n",
        "● Los setters y getters para cada uno de los atributos. El atributo no se puede modificar directamente, sólo ingresando o retirando dinero.\n",
        "\n",
        "● mostrar(): Muestra los datos de la cuenta.\n",
        "\n",
        "● ingresar(cantidad): se ingresa una cantidad a la cuenta, si la cantidad introducida es negativa, no se hará nada.\n",
        "\n",
        "● retirar(cantidad): se retira una cantidad a la cuenta. La cuenta puede estar en números rojos."
      ],
      "metadata": {
        "id": "jpXhqn5E4u2p"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class Cuenta:\n",
        "  def __init__(self,titular,cantidad):\n",
        "    self.__titular=titular\n",
        "    self.__cantidad=cantidad\n",
        "\n",
        "  @property\n",
        "  def titular(self):\n",
        "    return self.__titular\n",
        "  \n",
        "  @titular.setter\n",
        "  def titular(self,titular):\n",
        "    self.__titular=titular\n",
        "\n",
        "  @property\n",
        "  def cantidad(self):\n",
        "    return self.__cantidad\n",
        "\n",
        "  def mostrar(self):\n",
        "    return f'Titular: {self.titular} Cantidad {self.cantidad}'\n",
        "  \n",
        "  def ingresar(self,cantidad):\n",
        "    if cantidad > 0:\n",
        "      self.__cantidad = self.__cantidad + cantidad\n",
        "\n",
        "  def retirar(self,cantidad):\n",
        "    if cantidad > 0:\n",
        "      self.__cantidad = self.__cantidad - cantidad\n",
        "\n",
        "usuario1=Cuenta('Ivan',100)\n",
        "usuario1.ingresar(-500)\n",
        "usuario1.ingresar(500)\n",
        "usuario1.retirar(700)\n",
        "usuario1.mostrar()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "AHa4LqtT4-Ra",
        "outputId": "1db9d256-bcc6-4ae7-ad85-2852158457ff"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'Titular: Ivan Cantidad -100'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Ejercicio 3 (2 puntos)\n",
        "Vamos a definir ahora una “Cuenta Joven”, para ello vamos a crear una nueva clase Cuenta Joven que deriva de la anterior. Cuando se crea esta nueva clase, además del titular y la cantidad se debe guardar una bonificación que estará expresada en tanto por ciento.Construye los siguientes métodos para la clase:\n",
        "\n",
        "● Un constructor.\n",
        "\n",
        "● Los setters y getters para el nuevo atributo.\n",
        "\n",
        "● En esta ocasión los titulares de este tipo de cuenta tienen que ser mayor de edad;, por lo tanto hay que crear un método es Titular Válido ( ) que devuelve verdadero si el titular es mayor de edad pero menor de 25 años y falso en caso contrario.\n",
        "\n",
        "● Además la retirada de dinero sólo se podrá hacer si el titular es válido.\n",
        "\n",
        "● El método mostrar() debe devolver el mensaje de “Cuenta Joven” y la bonificación de la cuenta.\n",
        "\n",
        "● Piensa los métodos heredados de la clase madre que hay que reescribir."
      ],
      "metadata": {
        "id": "z9BnBMfD9TTT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class CuentaJoven(Cuenta):\n",
        "  def __init__(self,titular,cantidad,bonificacion,edad):\n",
        "    super().__init__(titular,cantidad)\n",
        "    self.__bonificacion=bonificacion\n",
        "    self.__edad=edad\n",
        "\n",
        "  @property\n",
        "  def bonificacion(self):\n",
        "    return self.__bonificacion\n",
        "\n",
        "  @bonificacion.setter\n",
        "  def bonificacion(self,bonificacion):\n",
        "    self.__bonificacion=bonificacion\n",
        "    \n",
        "  def esTitularValido(self):\n",
        "    return self.__edad < 26 and self.__edad > 17\n",
        "\n",
        "  def ingresar(self,cantidad):\n",
        "    if self.esTitularValido():\n",
        "      super().ingresar(cantidad) \n",
        "      print (f'Validación exitosa, se ingreso la cantidad de {self.cantidad}')\n",
        "    else:\n",
        "      print ('No se realizo la operacion porque el titular no es valido')\n",
        "\n",
        "  def retirar(self,cantidad):\n",
        "    if self.esTitularValido():\n",
        "      super().retirar(cantidad) \n",
        "      print (f'Validación exitosa, se retiro la cantidad de {self.cantidad}')\n",
        "    else:\n",
        "      print ('No se realizo la operacion porque el titular no es valido')\n",
        "\n",
        "  def mostrar(self):\n",
        "    return f'Cuenta Joven Titular: {self.titular} Cantidad: {self.cantidad} Bonificacion: {self.bonificacion} %'\n",
        "\n",
        "usuario2=CuentaJoven('Nina',1000,0,18)\n",
        "usuario2.mostrar()\n",
        "usuario2.esTitularValido()\n",
        "usuario2.retirar(500)\n",
        "usuario2.mostrar()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 53
        },
        "id": "HN_w1CZLPGWT",
        "outputId": "f905986d-70fb-404e-d280-53a9256ae491"
      },
      "execution_count": 72,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validación exitosa, se retiro la cantidad de 500\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'Cuenta Joven Titular: Nina Cantidad: 500 Bonificacion: 0 %'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 72
        }
      ]
    }
  ]
}